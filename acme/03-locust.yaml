---
apiVersion: v1
kind: Namespace
metadata:
  name: loadgen
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: acme-fitness-locust
  namespace: loadgen
spec:
  selector:
    matchLabels:
      app: acme-fitness-locust
  replicas: 1
  template:
    metadata:
      labels:
        app: acme-fitness-locust
    spec:
      terminationGracePeriodSeconds: 5
      restartPolicy: Always
      volumes:
      - name: acme-fitness-locustfile
        configMap:
          name: acme-fitness-locustfile
      containers:
      - name: main
        image: locustio/locust:1.4.1
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8089
        command:
        - locust
        args: ["-f","/mnt/locust/locustfile.py","--headless","--host=https://acme.essos.gorke.ml"]
        resources:
          requests:
            cpu: 300m
            memory: 256Mi
          limits:
            cpu: 1500m
            memory: 1512Mi
        volumeMounts:
        - name: acme-fitness-locustfile
          mountPath: /mnt/locust
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: acme-fitness-locustfile
  namespace: loadgen
data:
  locustfile.py: |
    from locust import HttpUser, task, Locust, LoadTestShape, between

    class WebSiteUser(HttpUser):
        wait_time = between(0.5, 2)
        @task
        def index(self):
            self.client.get("/catalog.html")

    class StagesShape(LoadTestShape):
        """
        A simply load test shape class that has different user and spawn_rate at
        different stages.
        Keyword arguments:
            stages -- A list of dicts, each representing a stage with the following keys:
                duration -- When this many seconds pass the test is advanced to the next stage
                users -- Total user count
                spawn_rate -- Number of users to start/stop per second
                stop -- A boolean that can stop that test at a specific stage
            stop_at_end -- Can be set to stop once all stages have run.
        """
        cycletime = 2400
        stages = [
            {"duration": 10, "users": 2000, "spawn_rate": 50},
            {"duration": 150, "users": 5000, "spawn_rate": 20},
            {"duration": 300, "users": 1000, "spawn_rate": 50},
            {"duration": 450, "users": 150, "spawn_rate": 50},
            {"duration": 600, "users": 500, "spawn_rate": 50},
            {"duration": 750, "users": 3000, "spawn_rate": 50},
            {"duration": 900, "users": 20000, "spawn_rate": 10},
            {"duration": 1050, "users": 1000, "spawn_rate": 50},
            {"duration": 1200, "users": 5000, "spawn_rate": 10},
            {"duration": 10, "users": 2000, "spawn_rate": 50},
            {"duration": 150, "users": 5000, "spawn_rate": 20},
            {"duration": 300, "users": 1000, "spawn_rate": 50},
            {"duration": 450, "users": 15000, "spawn_rate": 50},
            {"duration": 2400, "users": 5000, "spawn_rate": 50},
            {"duration": 2400, "users": 3000, "spawn_rate": 5},
            {"duration": 2900, "users": 2000, "spawn_rate": 10},
            {"duration": 2050, "users": 1000, "spawn_rate": 50},
            {"duration": 1200, "users": 5000, "spawn_rate": 10},
            {"duration": 10, "users": 2000, "spawn_rate": 50},
            {"duration": 150, "users": 5000, "spawn_rate": 20},
            {"duration": 300, "users": 1000, "spawn_rate": 50},
            {"duration": 450, "users": 150, "spawn_rate": 50},
            {"duration": 600, "users": 500, "spawn_rate": 50},
            {"duration": 750, "users": 3000, "spawn_rate": 50},
            {"duration": 900, "users": 20000, "spawn_rate": 10},
            {"duration": 1050, "users": 1000, "spawn_rate": 50},
            {"duration": 1200, "users": 5000, "spawn_rate": 10},
            {"duration": 10, "users": 2000, "spawn_rate": 50},
            {"duration": 150, "users": 5000, "spawn_rate": 20},
            {"duration": 300, "users": 1000, "spawn_rate": 50},
            {"duration": 450, "users": 15000, "spawn_rate": 50},
            {"duration": 2400, "users": 5000, "spawn_rate": 50},
            {"duration": 2400, "users": 3000, "spawn_rate": 5},
            {"duration": 2900, "users": 2000, "spawn_rate": 10},
            {"duration": 2050, "users": 1000, "spawn_rate": 50},
            {"duration": 1200, "users": 5000, "spawn_rate": 10},
        ]    
        def tick(self):
            run_time = self.get_run_time() % self.cycletime
    
            for stage in self.stages:
                if run_time < stage["duration"]:
                    tick_data = (stage["users"], stage["spawn_rate"])
                    return tick_data
            return None